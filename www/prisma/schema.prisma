generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id        String   @id @default(nanoid(9))
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    keys        Key[]
    events      Event[]
    captures    Capture[]

    @@index([name])
}

model Key {
    key       String   @id
    createdAt DateTime @default(now())

    type KeyType

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
}

model Capture {
    id         String   @id @default(nanoid(9))
    name       String
    capturedAt DateTime @default(now())
    data       Json?

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String
}

model Event {
    id        String   @id @default(nanoid(9))
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    Capture   Capture[]

    @@unique([name, projectId])
}

enum KeyType {
    PRIVATE
    PUBLIC
}
